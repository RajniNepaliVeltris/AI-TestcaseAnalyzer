```mermaid
flowchart TD
    %% Start Node
    START([üöÄ Test Execution Begins])

    %% Configuration Phase
    CONFIG[‚öôÔ∏è Configuration Setup]
    CONFIG --> ENV_CHECK{Environment<br/>Configured?}
    ENV_CHECK -->|Yes| API_READY[‚úÖ AI Providers Ready]
    ENV_CHECK -->|No| CONFIG_ERROR[‚ùå Configuration Error<br/>Missing API Keys]

    %% Test Execution Phase
    API_READY --> TEST_EXEC[üé≠ Playwright Test Execution]
    TEST_EXEC --> TEST_RESULTS[Test Results<br/>Generated]

    %% Analysis Phase
    TEST_RESULTS --> FAILURE_CHECK{Tests<br/>Passed?}

    FAILURE_CHECK -->|‚úÖ All Passed| SUCCESS_REPORT[üìä Success Report<br/>Generated]
    FAILURE_CHECK -->|‚ùå Some Failed| FAILURE_ANALYSIS[üîç AI Failure Analysis]

    %% AI Analysis Flow
    FAILURE_ANALYSIS --> PROVIDER_SELECT{AI Provider<br/>Available?}
    PROVIDER_SELECT -->|OpenAI| OPENAI_ANALYZE[ü§ñ OpenAI Analysis]
    PROVIDER_SELECT -->|TogetherAI| TOGETHER_ANALYZE[üß† TogetherAI Analysis]
    PROVIDER_SELECT -->|None| FALLBACK_ANALYZE[üìã Rule-based<br/>Fallback Analysis]

    %% Analysis Results
    OPENAI_ANALYZE --> ANALYSIS_COMPLETE
    TOGETHER_ANALYZE --> ANALYSIS_COMPLETE
    FALLBACK_ANALYZE --> ANALYSIS_COMPLETE

    ANALYSIS_COMPLETE[üìù Analysis Complete] --> CLUSTERING

    %% Clustering Phase
    CLUSTERING[üîó Failure Clustering<br/>Pattern Recognition] --> CLUSTER_RESULTS

    %% Report Generation
    CLUSTER_RESULTS[üìà Clustered Results] --> REPORT_GEN[üìÑ HTML Report<br/>Generation]

    REPORT_GEN --> REPORT_READY[üéØ AI Analysis Report<br/>Ready]

    %% Notification Phase
    REPORT_READY --> NOTIFY_CHECK{Slack<br/>Configured?}
    NOTIFY_CHECK -->|Yes| SLACK_NOTIFY[üì¢ Slack Notification<br/>Sent]
    NOTIFY_CHECK -->|No| COMPLETE

    SLACK_NOTIFY --> COMPLETE
    SUCCESS_REPORT --> COMPLETE

    %% End Node
    COMPLETE([‚úÖ Framework Execution Complete])

    %% Error Handling
    CONFIG_ERROR --> END_ERROR([‚ùå Setup Failed])
    TEST_EXEC --> TEST_ERROR[Test Execution<br/>Error]
    TEST_ERROR --> END_ERROR

    %% Styling
    classDef startClass fill:#e1f5fe,stroke:#01579b,stroke-width:2px
    classDef configClass fill:#f3e5f5,stroke:#4a148c,stroke-width:2px
    classDef testClass fill:#e8f5e8,stroke:#1b5e20,stroke-width:2px
    classDef aiClass fill:#fff3e0,stroke:#e65100,stroke-width:2px
    classDef reportClass fill:#fce4ec,stroke:#880e4f,stroke-width:2px
    classDef successClass fill:#e8f5e8,stroke:#2e7d32,stroke-width:2px
    classDef errorClass fill:#ffebee,stroke:#c62828,stroke-width:2px

    class START,COMPLETE startClass
    class CONFIG,ENV_CHECK,API_READY configClass
    class TEST_EXEC,TEST_RESULTS,FAILURE_CHECK testClass
    class FAILURE_ANALYSIS,PROVIDER_SELECT,OPENAI_ANALYZE,TOGETHER_ANALYZE,FALLBACK_ANALYZE,ANALYSIS_COMPLETE,CLUSTERING,CLUSTER_RESULTS aiClass
    class REPORT_GEN,REPORT_READY,NOTIFY_CHECK,SLACK_NOTIFY reportClass
    class SUCCESS_REPORT successClass
    class CONFIG_ERROR,TEST_ERROR,END_ERROR errorClass
```